     1                                  [BITS 16]
     2                                  [ORG 0X7C00]
     3                                  
     4                                  
     5                                  %DEFINE ENDL 0X0D, 0x0A ;ENDL SAME AS IN C++
     6                                  
     7                                  
     8                                  
     9                                  
    10                                  ;
    11                                  ; FAT12 HEADER
    12                                  ; REFERENCE: https://wiki.osdev.org/FAT, https://en.wikipedia.org/wiki/Design_of_the_FAT_file_system
    13                                  ; FORMAT REFERENCE: https://github.com/microsoft/MS-DOS/blob/main/v4.0/src/BOOT/MSBOOT.ASM
    14                                  ; EXPLANATION IN NOTES
    15                                  ;
    16                                  
    17                                  ;BOOT SECTOR
    18 00000000 EB38                        JMP SHORT START
    19 00000002 90                          NOP
    20 00000003 4D5357494E342E31            OEM_ID                      DB "MSWIN4.1"
    21 0000000B 0002                        BYTES_PER_SECTOR            DW 512
    22 0000000D 01                          SECTORS_PER_CLUSTER         DB 1
    23 0000000E 0100                        RESERVED_SECTORS            DW 1
    24 00000010 02                          NUMBER_OF_FATS              DB 2
    25 00000011 E000                        ROOT_DIR_ENTRIES            DW 0E0h ;14 ENTRIES PER SECTOR * 16 SECTORS
    26 00000013 400B                        TOTAL_SECTORS               DW 2880
    27 00000015 F0                          MEDIA_DESCRIPTOR            DB 0xF0
    28 00000016 0900                        SECTORS_PER_FAT             DW 9
    29 00000018 1200                        SECTORS_PER_TRACK           DW 18
    30 0000001A 0200                        NUMBER_OF_HEADS             DW 2
    31 0000001C 00000000                    HIDDEN_SECTORS              DD 0
    32                                  
    33                                  
    34                                  ;BOOT SECTOR EXTENSION
    35 00000020 00                          DRIVE_NUMBER                DB 0 ;0X00 FOR FLOPPY DISK, 0X80 FOR HARDDISK
    36 00000021 00                          RESERVED                    DB 0
    37 00000022 29                          EXTENDED_BOOT_SIGNATURE     DB 0x29
    38 00000023 78563412                    VOLUME_ID                   DD 0x12345678
    39 00000027 20204D594445562020-         VOLUME_LABEL                DB "  MYDEV  OS"
    39 00000030 4F53               
    40 00000032 4641543132202020            FILE_SYSTEM_TYPE            DB "FAT12   "
    41                                  
    42                                  
    43                                  
    44                                  START:
    45 0000003A E9B200                      JMP MAIN
    46                                  
    47                                  ;===================FUNCTIONS===================
    48                                  ;PRINT A STRING
    49                                  ;PARAMS: DS-SI POINTS TO THE STRING
    50                                  PRINT:
    51 0000003D 60                          PUSHA
    52                                  
    53                                      .LOOP:
    54 0000003E AC                              LODSB ;LOAD BYTE FROM DS:SI INTO AL AND INCREMENT SI
    55 0000003F 08C0                            OR AL, AL ;CHECK IF AL IS ZERO, I.E NEXT CHARACTER IS NULL
    56 00000041 740A                            JZ .DONE ;IF ZERO, WE ARE DONE
    57                                  
    58 00000043 B40E                            MOV AH, 0x0E ;TELETYPE OUTPUT
    59 00000045 B700                            MOV BH, 0x00 ;PAGE NUMBER
    60 00000047 B307                            MOV BL, 0x07 ;TEXT COLOR
    61 00000049 CD10                            INT 0x10 ;BIOS VIDEO SERVICES
    62                                  
    63 0000004B EBF1                            JMP .LOOP
    64                                      
    65                                      .DONE:
    66 0000004D 61                              POPA
    67 0000004E C3                              RET
    68                                  ;END OF PRINT FUNCTION
    69                                  
    70                                  
    71                                  ;CLEAR A SCREEN
    72                                  ;PARAMS: NONE
    73                                  
    74                                  CLRSCR:
    75                                  
    76 0000004F 06                          PUSH ES 
    77 00000050 50                          PUSH AX
    78 00000051 51                          PUSH CX
    79 00000052 57                          PUSH DI
    80                                  
    81 00000053 B800B8                      MOV AX, 0xB800
    82 00000056 8EC0                        MOV ES, AX  ;ES POINTS TO VIDEO BASE
    83 00000058 31FF                        XOR DI, DI  ;DI POINTS TO TOP LEFT CORNER
    84 0000005A B82007                      MOV AX, 0x0720  ;SPACE CHAR IN NORMAL ATTRIBUTE
    85 0000005D B9D007                      MOV CX, 2000    ;NUMBER OF SCREEN LOCATIONS
    86                                      
    87 00000060 FC                          CLD
    88 00000061 F3AB                        REP STOSW    ;CLEAR THE WHOLE SCREEN
    89                                  
    90 00000063 5F                          POP DI
    91 00000064 59                          POP CX
    92 00000065 58                          POP AX
    93 00000066 07                          POP ES
    94 00000067 C3                          RET
    95                                  
    96                                  
    97                                  ;
    98                                  ;DISK ROUTINES
    99                                  ;
   100                                  
   101                                  
   102                                  ; CONVERT LOGICAL BLOCK ADDRESS TO CYLINDER, HEAD AND SECTOR
   103                                  ; PARAMS:
   104                                  ; -AX - LBA, 
   105                                  ; RETURNS: 
   106                                  ; -CX [BIT 0-5]: SECTOR NUMBER, [BIT 6-15]: CYLINDER NUMBER
   107                                  ; -DH: HEAD NUMBER
   108                                  ; REFERENCE: https://wiki.osdev.org/Disk_access_using_the_BIOS_(INT_13h)
   109                                  
   110                                  
   111                                  LBA_TO_CHS:
   112                                  
   113 00000068 8D36[6D01]                  LEA SI, BREAKPOINT_MESSAGE_LBA
   114 0000006C E8CEFF                      CALL PRINT
   115                                  
   116                                  
   117 0000006F 50                          PUSH AX
   118 00000070 52                          PUSH DX
   119                                  
   120                                  
   121 00000071 31D2                        XOR DX, DX
   122                                  
   123 00000073 F736[1800]                  DIV WORD [SECTORS_PER_TRACK]            ;AX = TEMP
   124 00000077 42                          INC DX                                  ;DX = SECTOR ;SECTOR IS 1 BASED NOT 0 BASED SO SHIT STARTS FROM 1,2,3..
   125                                  
   126 00000078 89D1                        MOV CX, DX                              ;TEMPOARY STORE SECTOR VALUE IN CX
   127                                  
   128 0000007A 31D2                        XOR DX, DX
   129 0000007C F736[1A00]                  DIV WORD [NUMBER_OF_HEADS]               ;AX = CYLINDER, DX = HEAD
   130                                  
   131                                      ;CURRENTLY     -->     AX = CYLINDER      DX = HEAD       CX = SECTOR 
   132                                  
   133 00000080 88D6                        MOV DH, DL 
   134 00000082 88C5                        MOV CH, AL
   135 00000084 C0E406                      SHL AH, 6
   136 00000087 08E1                        OR CL, AH
   137                                  
   138 00000089 58                          POP AX 
   139 0000008A 88C2                        MOV DL, AL
   140 0000008C 58                          POP AX
   141 0000008D C3                          RET
   142                                  
   143                                  
   144                                  ;
   145                                  ; READ FROM A DISK
   146                                  ; PARAMS:
   147                                  ;   - AX: CONTAINS LBA
   148                                  ;   - CL: NUM OF SECTORS TO READ
   149                                  ;   - DL: DRIVE NUMBER
   150                                  ;   - ES:BX : MEM ADDRESS TO STORE THE READ DATA
   151                                  ;REFERENCE: https://www.stanislavs.org/helppc/int_13-2.html
   152                                  ;    
   153                                  READ_DISK:
   154                                  
   155 0000008E 50                          PUSH AX
   156 0000008F 53                          PUSH BX
   157 00000090 51                          PUSH CX 
   158 00000091 52                          PUSH DX
   159 00000092 57                          PUSH DI 
   160                                  
   161 00000093 8D36[8501]                  LEA SI, BREAKPOINT_MESSAGE_READ_DISK
   162 00000097 E8A3FF                      CALL PRINT
   163                                  
   164 0000009A 51                          PUSH CX
   165 0000009B E8CAFF                      CALL LBA_TO_CHS
   166                                  
   167 0000009E 58                          POP AX                              ;TRANSFERRING THE VALUE IN CX TO AL
   168 0000009F B402                        MOV AH, 02 
   169                                  
   170 000000A1 BF0300                      MOV DI, 3
   171                                  
   172                                      .RETRY_LOOP:
   173 000000A4 60                              PUSHA
   174 000000A5 F9                              STC                             ;IF CARRY FLAG IS CLEARED THEN OPERATION SUCCESSFUL
   175 000000A6 CD13                            INT 13H
   176 000000A8 731B                            JNC .RETRY_DONE
   177                                  
   178 000000AA 61                              POPA 
   179 000000AB E82500                          CALL DISK_RESET                 ;IN CASE OF FAILIURE RESET THE DISK
   180                                  
   181 000000AE 4F                              DEC DI
   182 000000AF 85FF                            TEST DI, DI
   183 000000B1 75F1                            JNZ .RETRY_LOOP
   184                                  
   185                                      .RETRY_FAIL:
   186                                  
   187 000000B3 BE[3201]                        MOV SI, RETRY_FAIL_MSG
   188 000000B6 E884FF                          CALL PRINT
   189 000000B9 F4                              HLT                             ;IN CASE OF FAILURE HALT THE SYSTEM
   190                                  
   191 000000BA B400                            MOV AH, 0
   192 000000BC CD16                            INT 16H
   193 000000BE EA0000FFFF                      JMP 0FFFFH:0000H                ;JUMP TO 0X0000:0XFFFF TO RESTART THE SYSTEM
   194 000000C3 EB54                            JMP HALT_LOOP
   195                                  
   196                                          
   197                                  
   198                                  
   199                                      .RETRY_DONE:
   200 000000C5 61                              POPA
   201                                  
   202 000000C6 5F                              POP DI
   203 000000C7 5A                              POP DX
   204 000000C8 59                              POP CX
   205 000000C9 5B                              POP BX
   206 000000CA 58                              POP AX
   207                                  
   208                                  
   209 000000CB 8D36[9B01]                      LEA SI, BREAKPOINT_MESSAGE_READ_DISK_ENDED
   210 000000CF E86BFF                          CALL PRINT
   211                                  
   212 000000D2 C3                              RET
   213                                  
   214                                  
   215                                  ;
   216                                  ; RESETS THE DISK
   217                                  ; PARAMS: DL - DRIVE NUMBER
   218                                  ; REFERENCE: https://www.stanislavs.org/helppc/int_13-2.html
   219                                  ;
   220                                  
   221                                  DISK_RESET:
   222 000000D3 60                          PUSHA
   223                                  
   224 000000D4 B400                        MOV AH, 00
   225 000000D6 F9                          STC
   226 000000D7 CD13                        INT 13H
   227                                  
   228 000000D9 7202                        JC .DISK_RESET_FAIL
   229                                  
   230 000000DB 61                          POPA
   231 000000DC C3                          RET
   232                                  
   233                                      .DISK_RESET_FAIL:
   234 000000DD BE[3201]                        MOV SI, RETRY_FAIL_MSG
   235 000000E0 E85AFF                          CALL PRINT
   236 000000E3 F4                              HLT
   237                                  
   238 000000E4 B400                            MOV AH, 0
   239 000000E6 CD16                            INT 16H
   240 000000E8 EA0000FFFF                      JMP 0FFFFH:0000H                ;JUMP TO 0X0000:0XFFFF TO RESTART THE SYSTEM
   241 000000ED EB2A                            JMP HALT_LOOP
   242                                  
   243                                      
   244                                  
   245                                  
   246                                  
   247                                  ;===================END OF FUNCTIONS===================
   248                                  
   249                                  
   250                                  
   251                                  
   252                                  
   253                                  ;===================MAIN===================
   254                                  
   255                                  MAIN:
   256 000000EF 31C0                        XOR AX, AX
   257 000000F1 8ED8                        MOV DS, AX
   258 000000F3 8EC0                        MOV ES, AX
   259                                      
   260                                      ;SETUP STACK IN A SAFE PLACE
   261                                  
   262 000000F5 FB                          STI                         ;STOP INTERRUPTS 
   263 000000F6 8ED0                        MOV SS, AX 
   264 000000F8 B8007C                      MOV AX, 0X7C00 
   265 000000FB 89C4                        MOV SP, AX                  ;THIS LOCATION IS SAFE AS OUR ORG BEGINS AT 0X7C00
   266                                                                  ;AND THE STACK GROWS DOWNWARDS
   267                                  
   268 000000FD FA                          CLI                         ;RESUME INTERRUPTS
   269                                  
   270                                      ;TEST READ DISK
   271                                  
   272 000000FE 8D36[5401]                  LEA SI, BREAKPOINT_MESSAGE
   273 00000102 E838FF                      CALL PRINT
   274                                  
   275 00000105 8816[2000]                  MOV [DRIVE_NUMBER], DL
   276 00000109 B80100                      MOV AX, 1                  ;LBA = 1
   277 0000010C B11B                        MOV CL, 27               ;NUMBER OF SECTORS TO READ ;THE GAME WILL BE AROUND 13.6KB SO WE WILL READ 27 SECTORS
   278 0000010E BBE43E                      MOV BX, 0x3EE4              ;DATA AFTER 0X0100
   279 00000111 E87AFF                      CALL READ_DISK
   280                                  
   281                                      ; ;PRINT WELCOME MESSAGE
   282                                      ; LEA SI, WELCOME_MSG         ;LOAD EFFECTIVE ADDRESS OF WELCOME_MSG INTO SI
   283                                      ; CALL PRINT
   284                                  
   285                                      ;JUMP TO GAME CODE OFFSET
   286 00000114 E9(E43E)                    JMP 0X3EE4
   287                                  
   288                                  
   289                                      
   290 00000117 FA                          CLI
   291 00000118 F4                          HLT
   292                                  
   293                                  
   294                                  ;===================END OF MAIN===================
   295                                  
   296                                  
   297                                      HALT_LOOP:                  ;INFINITE LOOP TO HALT THE SYSTEM IN CASE OF FAILURE
   298 00000119 FA                              CLI
   299 0000011A F4                              HLT
   300 0000011B EBFC                            JMP HALT_LOOP
   301                                  
   302                                  .DATA: ;ALWAYS PLACE THIS SHIT ON THE BOTTOM
   303                                  
   304 0000011D 57454C434F4D452054-     WELCOME_MSG DB "WELCOME TO GAME_OS", ENDL, 0
   304 00000126 4F2047414D455F4F53-
   304 0000012F 0D0A00             
   305 00000132 4449534B20434F554C-     RETRY_FAIL_MSG DB "DISK COULD NOT BE READ PROPERLY", ENDL, 0
   305 0000013B 44204E4F5420424520-
   305 00000144 524541442050524F50-
   305 0000014D 45524C590D0A00     
   306                                  
   307 00000154 4D41494E2050524F47-     BREAKPOINT_MESSAGE: DB "MAIN PROG HAS BEGUN...", ENDL, 0
   307 0000015D 204841532042454755-
   307 00000166 4E2E2E2E0D0A00     
   308 0000016D 4C4241205041525420-     BREAKPOINT_MESSAGE_LBA: DB "LBA PART HAS BEGUN..." ,ENDL, 0
   308 00000176 48415320424547554E-
   308 0000017F 2E2E2E0D0A00       
   309 00000185 4449534B2052454144-     BREAKPOINT_MESSAGE_READ_DISK: DB "DISK READ HAS BEGUN", ENDL, 0
   309 0000018E 204841532042454755-
   309 00000197 4E0D0A00           
   310 0000019B 4449534B2052454144-     BREAKPOINT_MESSAGE_READ_DISK_ENDED: DB "DISK READ HAS ENDED", ENDL, 0
   310 000001A4 2048415320454E4445-
   310 000001AD 440D0A00           
   311                                  
   312 000001B1 00<rep 4Dh>             TIMES 510 - ($ - $$)            DB 0
   313                                  
   314 000001FE 55AA                    dw 0xAA55
